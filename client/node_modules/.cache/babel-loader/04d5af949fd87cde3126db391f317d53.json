{"ast":null,"code":"/*!\n * Connect - session - Store\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar Cookie = require('./cookie');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar Session = require('./session');\n\nvar util = require('util');\n/**\n * Module exports.\n * @public\n */\n\n\nmodule.exports = Store;\n/**\n * Abstract base class for session stores.\n * @public\n */\n\nfunction Store() {\n  EventEmitter.call(this);\n}\n/**\n * Inherit from EventEmitter.\n */\n\n\nutil.inherits(Store, EventEmitter);\n/**\n * Re-generate the given requests's session.\n *\n * @param {IncomingRequest} req\n * @return {Function} fn\n * @api public\n */\n\nStore.prototype.regenerate = function (req, fn) {\n  var self = this;\n  this.destroy(req.sessionID, function (err) {\n    self.generate(req);\n    fn(err);\n  });\n};\n/**\n * Load a `Session` instance via the given `sid`\n * and invoke the callback `fn(err, sess)`.\n *\n * @param {String} sid\n * @param {Function} fn\n * @api public\n */\n\n\nStore.prototype.load = function (sid, fn) {\n  var self = this;\n  this.get(sid, function (err, sess) {\n    if (err) return fn(err);\n    if (!sess) return fn();\n    var req = {\n      sessionID: sid,\n      sessionStore: self\n    };\n    fn(null, self.createSession(req, sess));\n  });\n};\n/**\n * Create session from JSON `sess` data.\n *\n * @param {IncomingRequest} req\n * @param {Object} sess\n * @return {Session}\n * @api private\n */\n\n\nStore.prototype.createSession = function (req, sess) {\n  var expires = sess.cookie.expires,\n      orig = sess.cookie.originalMaxAge;\n  sess.cookie = new Cookie(sess.cookie);\n  if ('string' == typeof expires) sess.cookie.expires = new Date(expires);\n  sess.cookie.originalMaxAge = orig;\n  req.session = new Session(req, sess);\n  return req.session;\n};","map":{"version":3,"sources":["C:/Users/tlarr/ffwebsite/node_modules/express-session/session/store.js"],"names":["Cookie","require","EventEmitter","Session","util","module","exports","Store","call","inherits","prototype","regenerate","req","fn","self","destroy","sessionID","err","generate","load","sid","get","sess","sessionStore","createSession","expires","cookie","orig","originalMaxAge","Date","session"],"mappings":"AAAA;;;;;;AAOA;AAEA;;;;;AAKA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,QAAD,CAAP,CAAkBC,YAArC;;AACA,IAAIC,OAAO,GAAGF,OAAO,CAAC,WAAD,CAArB;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAAlB;AAEA;;;;;;AAKAI,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AAEA;;;;;AAKA,SAASA,KAAT,GAAkB;AAChBL,EAAAA,YAAY,CAACM,IAAb,CAAkB,IAAlB;AACD;AAED;;;;;AAIAJ,IAAI,CAACK,QAAL,CAAcF,KAAd,EAAqBL,YAArB;AAEA;;;;;;;;AAQAK,KAAK,CAACG,SAAN,CAAgBC,UAAhB,GAA6B,UAASC,GAAT,EAAcC,EAAd,EAAiB;AAC5C,MAAIC,IAAI,GAAG,IAAX;AACA,OAAKC,OAAL,CAAaH,GAAG,CAACI,SAAjB,EAA4B,UAASC,GAAT,EAAa;AACvCH,IAAAA,IAAI,CAACI,QAAL,CAAcN,GAAd;AACAC,IAAAA,EAAE,CAACI,GAAD,CAAF;AACD,GAHD;AAID,CAND;AAQA;;;;;;;;;;AASAV,KAAK,CAACG,SAAN,CAAgBS,IAAhB,GAAuB,UAASC,GAAT,EAAcP,EAAd,EAAiB;AACtC,MAAIC,IAAI,GAAG,IAAX;AACA,OAAKO,GAAL,CAASD,GAAT,EAAc,UAASH,GAAT,EAAcK,IAAd,EAAmB;AAC/B,QAAIL,GAAJ,EAAS,OAAOJ,EAAE,CAACI,GAAD,CAAT;AACT,QAAI,CAACK,IAAL,EAAW,OAAOT,EAAE,EAAT;AACX,QAAID,GAAG,GAAG;AAAEI,MAAAA,SAAS,EAAEI,GAAb;AAAkBG,MAAAA,YAAY,EAAET;AAAhC,KAAV;AACAD,IAAAA,EAAE,CAAC,IAAD,EAAOC,IAAI,CAACU,aAAL,CAAmBZ,GAAnB,EAAwBU,IAAxB,CAAP,CAAF;AACD,GALD;AAMD,CARD;AAUA;;;;;;;;;;AASAf,KAAK,CAACG,SAAN,CAAgBc,aAAhB,GAAgC,UAASZ,GAAT,EAAcU,IAAd,EAAmB;AACjD,MAAIG,OAAO,GAAGH,IAAI,CAACI,MAAL,CAAYD,OAA1B;AAAA,MACIE,IAAI,GAAGL,IAAI,CAACI,MAAL,CAAYE,cADvB;AAEAN,EAAAA,IAAI,CAACI,MAAL,GAAc,IAAI1B,MAAJ,CAAWsB,IAAI,CAACI,MAAhB,CAAd;AACA,MAAI,YAAY,OAAOD,OAAvB,EAAgCH,IAAI,CAACI,MAAL,CAAYD,OAAZ,GAAsB,IAAII,IAAJ,CAASJ,OAAT,CAAtB;AAChCH,EAAAA,IAAI,CAACI,MAAL,CAAYE,cAAZ,GAA6BD,IAA7B;AACAf,EAAAA,GAAG,CAACkB,OAAJ,GAAc,IAAI3B,OAAJ,CAAYS,GAAZ,EAAiBU,IAAjB,CAAd;AACA,SAAOV,GAAG,CAACkB,OAAX;AACD,CARD","sourcesContent":["/*!\n * Connect - session - Store\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar Cookie = require('./cookie')\nvar EventEmitter = require('events').EventEmitter\nvar Session = require('./session')\nvar util = require('util')\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = Store\n\n/**\n * Abstract base class for session stores.\n * @public\n */\n\nfunction Store () {\n  EventEmitter.call(this)\n}\n\n/**\n * Inherit from EventEmitter.\n */\n\nutil.inherits(Store, EventEmitter)\n\n/**\n * Re-generate the given requests's session.\n *\n * @param {IncomingRequest} req\n * @return {Function} fn\n * @api public\n */\n\nStore.prototype.regenerate = function(req, fn){\n  var self = this;\n  this.destroy(req.sessionID, function(err){\n    self.generate(req);\n    fn(err);\n  });\n};\n\n/**\n * Load a `Session` instance via the given `sid`\n * and invoke the callback `fn(err, sess)`.\n *\n * @param {String} sid\n * @param {Function} fn\n * @api public\n */\n\nStore.prototype.load = function(sid, fn){\n  var self = this;\n  this.get(sid, function(err, sess){\n    if (err) return fn(err);\n    if (!sess) return fn();\n    var req = { sessionID: sid, sessionStore: self };\n    fn(null, self.createSession(req, sess))\n  });\n};\n\n/**\n * Create session from JSON `sess` data.\n *\n * @param {IncomingRequest} req\n * @param {Object} sess\n * @return {Session}\n * @api private\n */\n\nStore.prototype.createSession = function(req, sess){\n  var expires = sess.cookie.expires\n    , orig = sess.cookie.originalMaxAge;\n  sess.cookie = new Cookie(sess.cookie);\n  if ('string' == typeof expires) sess.cookie.expires = new Date(expires);\n  sess.cookie.originalMaxAge = orig;\n  req.session = new Session(req, sess);\n  return req.session;\n};\n"]},"metadata":{},"sourceType":"script"}
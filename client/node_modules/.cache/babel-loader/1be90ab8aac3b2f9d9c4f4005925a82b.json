{"ast":null,"code":"/**\n * Ensure that no user is logged in before proceeding to next route middleware.\n *\n * This middleware ensures that no user is logged in.  If a request is received\n * that is authenticated, the request will be redirected to another page (by\n * default to `/`).\n *\n * Options:\n *   - `redirectTo`   URL to redirect to in logged in, defaults to _/_\n *\n * Examples:\n *\n *     app.get('/login',\n *       ensureLoggedOut(),\n *       function(req, res) { ... });\n *\n *     app.get('/login',\n *       ensureLoggedOut('/home'),\n *       function(req, res) { ... });\n *\n *     app.get('/login',\n *       ensureLoggedOut({ redirectTo: '/home' }),\n *       function(req, res) { ... });\n *\n * @param {Object} options\n * @return {Function}\n * @api public\n */\nmodule.exports = function ensureLoggedOut(options) {\n  if (typeof options == 'string') {\n    options = {\n      redirectTo: options\n    };\n  }\n\n  options = options || {};\n  var url = options.redirectTo || '/';\n  return function (req, res, next) {\n    if (req.isAuthenticated && req.isAuthenticated()) {\n      return res.redirect(url);\n    }\n\n    next();\n  };\n};","map":{"version":3,"sources":["C:/Users/tlarr/ffwebsite/node_modules/connect-ensure-login/lib/ensureLoggedOut.js"],"names":["module","exports","ensureLoggedOut","options","redirectTo","url","req","res","next","isAuthenticated","redirect"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BAA,MAAM,CAACC,OAAP,GAAiB,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;AACjD,MAAI,OAAOA,OAAP,IAAkB,QAAtB,EAAgC;AAC9BA,IAAAA,OAAO,GAAG;AAAEC,MAAAA,UAAU,EAAED;AAAd,KAAV;AACD;;AACDA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,MAAIE,GAAG,GAAGF,OAAO,CAACC,UAAR,IAAsB,GAAhC;AAEA,SAAO,UAASE,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC9B,QAAIF,GAAG,CAACG,eAAJ,IAAuBH,GAAG,CAACG,eAAJ,EAA3B,EAAkD;AAChD,aAAOF,GAAG,CAACG,QAAJ,CAAaL,GAAb,CAAP;AACD;;AACDG,IAAAA,IAAI;AACL,GALD;AAMD,CAdD","sourcesContent":["/**\n * Ensure that no user is logged in before proceeding to next route middleware.\n *\n * This middleware ensures that no user is logged in.  If a request is received\n * that is authenticated, the request will be redirected to another page (by\n * default to `/`).\n *\n * Options:\n *   - `redirectTo`   URL to redirect to in logged in, defaults to _/_\n *\n * Examples:\n *\n *     app.get('/login',\n *       ensureLoggedOut(),\n *       function(req, res) { ... });\n *\n *     app.get('/login',\n *       ensureLoggedOut('/home'),\n *       function(req, res) { ... });\n *\n *     app.get('/login',\n *       ensureLoggedOut({ redirectTo: '/home' }),\n *       function(req, res) { ... });\n *\n * @param {Object} options\n * @return {Function}\n * @api public\n */\nmodule.exports = function ensureLoggedOut(options) {\n  if (typeof options == 'string') {\n    options = { redirectTo: options }\n  }\n  options = options || {};\n  \n  var url = options.redirectTo || '/';\n  \n  return function(req, res, next) {\n    if (req.isAuthenticated && req.isAuthenticated()) {\n      return res.redirect(url);\n    }\n    next();\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
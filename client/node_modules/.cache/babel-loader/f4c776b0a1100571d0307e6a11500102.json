{"ast":null,"code":"/**\n * Ensure that a user is logged in before proceeding to next route middleware.\n *\n * This middleware ensures that a user is logged in.  If a request is received\n * that is unauthenticated, the request will be redirected to a login page (by\n * default to `/login`).\n *\n * Additionally, `returnTo` will be be set in the session to the URL of the\n * current request.  After authentication, this value can be used to redirect\n * the user to the page that was originally requested.\n *\n * Options:\n *   - `redirectTo`   URL to redirect to for login, defaults to _/login_\n *   - `setReturnTo`  set redirectTo in session, defaults to _true_\n *\n * Examples:\n *\n *     app.get('/profile',\n *       ensureLoggedIn(),\n *       function(req, res) { ... });\n *\n *     app.get('/profile',\n *       ensureLoggedIn('/signin'),\n *       function(req, res) { ... });\n *\n *     app.get('/profile',\n *       ensureLoggedIn({ redirectTo: '/session/new', setReturnTo: false }),\n *       function(req, res) { ... });\n *\n * @param {Object} options\n * @return {Function}\n * @api public\n */\nmodule.exports = function ensureLoggedIn(options) {\n  if (typeof options == 'string') {\n    options = {\n      redirectTo: options\n    };\n  }\n\n  options = options || {};\n  var url = options.redirectTo || '/login';\n  var setReturnTo = options.setReturnTo === undefined ? true : options.setReturnTo;\n  return function (req, res, next) {\n    if (!req.isAuthenticated || !req.isAuthenticated()) {\n      if (setReturnTo && req.session) {\n        req.session.returnTo = req.originalUrl || req.url;\n      }\n\n      return res.redirect(url);\n    }\n\n    next();\n  };\n};","map":{"version":3,"sources":["C:/Users/tlarr/ffwebsite/node_modules/connect-ensure-login/lib/ensureLoggedIn.js"],"names":["module","exports","ensureLoggedIn","options","redirectTo","url","setReturnTo","undefined","req","res","next","isAuthenticated","session","returnTo","originalUrl","redirect"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCAA,MAAM,CAACC,OAAP,GAAiB,SAASC,cAAT,CAAwBC,OAAxB,EAAiC;AAChD,MAAI,OAAOA,OAAP,IAAkB,QAAtB,EAAgC;AAC9BA,IAAAA,OAAO,GAAG;AAAEC,MAAAA,UAAU,EAAED;AAAd,KAAV;AACD;;AACDA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,MAAIE,GAAG,GAAGF,OAAO,CAACC,UAAR,IAAsB,QAAhC;AACA,MAAIE,WAAW,GAAIH,OAAO,CAACG,WAAR,KAAwBC,SAAzB,GAAsC,IAAtC,GAA6CJ,OAAO,CAACG,WAAvE;AAEA,SAAO,UAASE,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC9B,QAAI,CAACF,GAAG,CAACG,eAAL,IAAwB,CAACH,GAAG,CAACG,eAAJ,EAA7B,EAAoD;AAClD,UAAIL,WAAW,IAAIE,GAAG,CAACI,OAAvB,EAAgC;AAC9BJ,QAAAA,GAAG,CAACI,OAAJ,CAAYC,QAAZ,GAAuBL,GAAG,CAACM,WAAJ,IAAmBN,GAAG,CAACH,GAA9C;AACD;;AACD,aAAOI,GAAG,CAACM,QAAJ,CAAaV,GAAb,CAAP;AACD;;AACDK,IAAAA,IAAI;AACL,GARD;AASD,CAlBD","sourcesContent":["/**\n * Ensure that a user is logged in before proceeding to next route middleware.\n *\n * This middleware ensures that a user is logged in.  If a request is received\n * that is unauthenticated, the request will be redirected to a login page (by\n * default to `/login`).\n *\n * Additionally, `returnTo` will be be set in the session to the URL of the\n * current request.  After authentication, this value can be used to redirect\n * the user to the page that was originally requested.\n *\n * Options:\n *   - `redirectTo`   URL to redirect to for login, defaults to _/login_\n *   - `setReturnTo`  set redirectTo in session, defaults to _true_\n *\n * Examples:\n *\n *     app.get('/profile',\n *       ensureLoggedIn(),\n *       function(req, res) { ... });\n *\n *     app.get('/profile',\n *       ensureLoggedIn('/signin'),\n *       function(req, res) { ... });\n *\n *     app.get('/profile',\n *       ensureLoggedIn({ redirectTo: '/session/new', setReturnTo: false }),\n *       function(req, res) { ... });\n *\n * @param {Object} options\n * @return {Function}\n * @api public\n */\nmodule.exports = function ensureLoggedIn(options) {\n  if (typeof options == 'string') {\n    options = { redirectTo: options }\n  }\n  options = options || {};\n  \n  var url = options.redirectTo || '/login';\n  var setReturnTo = (options.setReturnTo === undefined) ? true : options.setReturnTo;\n  \n  return function(req, res, next) {\n    if (!req.isAuthenticated || !req.isAuthenticated()) {\n      if (setReturnTo && req.session) {\n        req.session.returnTo = req.originalUrl || req.url;\n      }\n      return res.redirect(url);\n    }\n    next();\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
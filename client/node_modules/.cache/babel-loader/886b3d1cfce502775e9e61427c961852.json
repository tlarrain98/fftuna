{"ast":null,"code":"/*!\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nconst csrf = require('csurf');\n\nconst passport = require('passport');\n\nconst {\n  Router\n} = require('express');\n\nconst querystring = require('querystring');\n\nconst uuid = require('uuid');\n\nconst bodyParser = require('body-parser');\n\nconst connectUtil = module.exports; // Create a router to easily add routes\n\nconnectUtil.createOIDCRouter = context => {\n  const oidcRouter = new Router();\n  oidcRouter.use(passport.initialize({\n    userProperty: 'userContext'\n  }));\n  oidcRouter.use(passport.session());\n  const {\n    login: {\n      path: loginPath\n    },\n    callback: {\n      path: callbackPath\n    }\n  } = context.options.routes;\n  oidcRouter.use(loginPath, bodyParser.urlencoded({\n    extended: false\n  }), connectUtil.createLoginHandler(context));\n  oidcRouter.use(callbackPath, connectUtil.createCallbackHandler(context));\n  oidcRouter.use((err, req, res, next) => {\n    // Cast all errors from the passport strategy as 401 (rather than 500, which would happen if we just call through to next())\n    res.status(401);\n    next(err);\n  });\n  return oidcRouter;\n};\n\nconnectUtil.createLoginHandler = context => {\n  const passportHandler = passport.authenticate('oidc');\n  const csrfProtection = csrf();\n  return function (req, res, next) {\n    const viewHandler = context.options.routes.login.viewHandler;\n\n    if (req.method === 'GET' && viewHandler) {\n      return csrfProtection(req, res, viewHandler.bind(null, req, res, next));\n    }\n\n    if (req.method === 'POST') {\n      return csrfProtection(req, res, err => {\n        if (err) {\n          return next(err);\n        }\n\n        const nonce = uuid.v4();\n        const state = uuid.v4();\n        const params = {\n          nonce,\n          state,\n          client_id: context.options.client_id,\n          redirect_uri: context.options.redirect_uri,\n          scope: context.options.scope,\n          response_type: 'code',\n          sessionToken: req.body.sessionToken\n        };\n        req.session[context.options.sessionKey] = {\n          nonce,\n          state\n        };\n        const url = `${context.options.issuer}/v1/authorize?${querystring.stringify(params)}`;\n        return res.redirect(url);\n      });\n    }\n\n    return passportHandler.apply(this, arguments);\n  };\n};\n\nconnectUtil.createCallbackHandler = context => {\n  const customHandler = context.options.routes.callback.handler;\n\n  if (!customHandler) {\n    return passport.authenticate('oidc', {\n      successReturnToOrRedirect: context.options.routes.callback.defaultRedirect,\n      failureRedirect: context.options.routes.callback.failureRedirect\n    });\n  }\n\n  const customHandlerArity = customHandler.length;\n  return (req, res, next) => {\n    const nextHandler = err => {\n      if (err && customHandlerArity < 4) return next(err);\n\n      switch (customHandlerArity) {\n        case 4:\n          customHandler(err, req, res, next);\n          break;\n\n        case 3:\n          customHandler(req, res, next);\n          break;\n\n        default:\n          throw new OIDCMiddlewareError('Your custom callback handler must request \"next\"');\n      }\n    };\n\n    passport.authenticate('oidc')(req, res, nextHandler);\n  };\n};","map":{"version":3,"sources":["C:/Users/tlarr/ffwebsite/node_modules/@okta/oidc-middleware/src/connectUtil.js"],"names":["csrf","require","passport","Router","querystring","uuid","bodyParser","connectUtil","module","exports","createOIDCRouter","context","oidcRouter","use","initialize","userProperty","session","login","path","loginPath","callback","callbackPath","options","routes","urlencoded","extended","createLoginHandler","createCallbackHandler","err","req","res","next","status","passportHandler","authenticate","csrfProtection","viewHandler","method","bind","nonce","v4","state","params","client_id","redirect_uri","scope","response_type","sessionToken","body","sessionKey","url","issuer","stringify","redirect","apply","arguments","customHandler","handler","successReturnToOrRedirect","defaultRedirect","failureRedirect","customHandlerArity","length","nextHandler","OIDCMiddlewareError"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nconst csrf = require('csurf');\nconst passport = require('passport');\nconst { Router } = require('express');\nconst querystring = require('querystring');\nconst uuid = require('uuid');\nconst bodyParser = require('body-parser');\n\nconst connectUtil = module.exports;\n\n// Create a router to easily add routes\nconnectUtil.createOIDCRouter = context => {\n  const oidcRouter = new Router();\n  oidcRouter.use(passport.initialize({ userProperty: 'userContext' }));\n  oidcRouter.use(passport.session());\n\n  const {\n    login: {\n      path:loginPath\n    },\n    callback: {\n      path:callbackPath\n    }\n  } = context.options.routes;\n  oidcRouter.use(loginPath, bodyParser.urlencoded({ extended: false}), connectUtil.createLoginHandler(context));\n  oidcRouter.use(callbackPath, connectUtil.createCallbackHandler(context));\n  oidcRouter.use((err, req, res, next) => {\n    // Cast all errors from the passport strategy as 401 (rather than 500, which would happen if we just call through to next())\n    res.status(401);\n    next(err);\n  });\n  return oidcRouter;\n};\n\nconnectUtil.createLoginHandler = context => {\n  const passportHandler = passport.authenticate('oidc');\n  const csrfProtection = csrf();\n\n  return function(req, res, next) {\n    const viewHandler = context.options.routes.login.viewHandler;\n    if (req.method === 'GET' && viewHandler) {\n      return csrfProtection(req, res, viewHandler.bind(null, req, res, next));\n    }\n    if (req.method === 'POST') {\n      return csrfProtection(req, res, (err) => {\n        if (err) {\n          return next(err);\n        }\n        const nonce = uuid.v4();\n        const state = uuid.v4();\n        const params = {\n          nonce,\n          state,\n          client_id: context.options.client_id,\n          redirect_uri: context.options.redirect_uri,\n          scope: context.options.scope,\n          response_type: 'code',\n          sessionToken: req.body.sessionToken\n        };\n        req.session[context.options.sessionKey] = {\n          nonce,\n          state\n        };\n        const url = `${context.options.issuer}/v1/authorize?${querystring.stringify(params)}`;\n        return res.redirect(url);\n      });\n    }\n    return passportHandler.apply(this, arguments);\n  }\n};\n\nconnectUtil.createCallbackHandler = context => {\n  const customHandler = context.options.routes.callback.handler;\n  if (!customHandler) {\n    return passport.authenticate('oidc', {\n      successReturnToOrRedirect: context.options.routes.callback.defaultRedirect,\n      failureRedirect: context.options.routes.callback.failureRedirect\n    });\n  }\n  const customHandlerArity = customHandler.length;\n  return (req, res, next) => {\n    const nextHandler = err => {\n      if (err && customHandlerArity < 4) return next(err);\n      switch(customHandlerArity) {\n        case 4:\n          customHandler(err, req, res, next);\n          break;\n        case 3:\n          customHandler(req, res, next);\n          break;\n        default:\n          throw new OIDCMiddlewareError('Your custom callback handler must request \"next\"');\n      }\n    };\n    passport.authenticate('oidc')(req, res, nextHandler);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/* @flow */\n\n/*::\n\ntype DotenvParseOptions = {\n  debug?: boolean\n}\n\n// keys and values from src\ntype DotenvParseOutput = { [string]: string }\n\ntype DotenvConfigOptions = {\n  path?: string, // path to .env file\n  encoding?: string, // encoding of .env file\n  debug?: string // turn on logging for debugging purposes\n}\n\ntype DotenvConfigOutput = {\n  parsed?: DotenvParseOutput,\n  error?: Error\n}\n\n*/\nconst fs = require('fs');\n\nconst path = require('path');\n\nfunction log(message\n/*: string */\n) {\n  console.log(`[dotenv][DEBUG] ${message}`);\n} // Parses src into an Object\n\n\nfunction parse(src\n/*: string | Buffer */\n, options\n/*: ?DotenvParseOptions */\n)\n/*: DotenvParseOutput */\n{\n  const debug = Boolean(options && options.debug);\n  const obj = {}; // convert Buffers before splitting into lines and processing\n\n  src.toString().split('\\n').forEach(function (line, idx) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    const keyValueArr = line.match(/^\\s*([\\w.-]+)\\s*=\\s*(.*)?\\s*$/); // matched?\n\n    if (keyValueArr != null) {\n      const key = keyValueArr[1]; // default undefined or missing values to empty string\n\n      let value = keyValueArr[2] || ''; // expand newlines in quoted values\n\n      const len = value ? value.length : 0;\n\n      if (len > 0 && value.charAt(0) === '\"' && value.charAt(len - 1) === '\"') {\n        value = value.replace(/\\\\n/gm, '\\n');\n      } // remove any surrounding quotes and extra spaces\n\n\n      value = value.replace(/(^['\"]|['\"]$)/g, '').trim();\n      obj[key] = value;\n    } else if (debug) {\n      log(`did not match key and value when parsing line ${idx + 1}: ${line}`);\n    }\n  });\n  return obj;\n} // Populates process.env from .env file\n\n\nfunction config(options\n/*: ?DotenvConfigOptions */\n)\n/*: DotenvConfigOutput */\n{\n  let dotenvPath = path.resolve(process.cwd(), '.env');\n  let encoding\n  /*: string */\n  = 'utf8';\n  let debug = false;\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = options.path;\n    }\n\n    if (options.encoding != null) {\n      encoding = options.encoding;\n    }\n\n    if (options.debug != null) {\n      debug = true;\n    }\n  }\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = parse(fs.readFileSync(dotenvPath, {\n      encoding\n    }), {\n      debug\n    });\n    Object.keys(parsed).forEach(function (key) {\n      if (!process.env.hasOwnProperty(key)) {\n        process.env[key] = parsed[key];\n      } else if (debug) {\n        log(`\"${key}\" is already defined in \\`process.env\\` and will not be overwritten`);\n      }\n    });\n    return {\n      parsed\n    };\n  } catch (e) {\n    return {\n      error: e\n    };\n  }\n}\n\nmodule.exports.config = config;\nmodule.exports.load = config;\nmodule.exports.parse = parse;","map":{"version":3,"sources":["C:/Users/tlarr/ffwebsite/node_modules/dotenv/lib/main.js"],"names":["fs","require","path","log","message","console","parse","src","options","debug","Boolean","obj","toString","split","forEach","line","idx","keyValueArr","match","key","value","len","length","charAt","replace","trim","config","dotenvPath","resolve","process","cwd","encoding","parsed","readFileSync","Object","keys","env","hasOwnProperty","e","error","module","exports","load"],"mappings":"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","sourcesContent":["/* @flow */\n/*::\n\ntype DotenvParseOptions = {\n  debug?: boolean\n}\n\n// keys and values from src\ntype DotenvParseOutput = { [string]: string }\n\ntype DotenvConfigOptions = {\n  path?: string, // path to .env file\n  encoding?: string, // encoding of .env file\n  debug?: string // turn on logging for debugging purposes\n}\n\ntype DotenvConfigOutput = {\n  parsed?: DotenvParseOutput,\n  error?: Error\n}\n\n*/\n\nconst fs = require('fs')\nconst path = require('path')\n\nfunction log (message /*: string */) {\n  console.log(`[dotenv][DEBUG] ${message}`)\n}\n\n// Parses src into an Object\nfunction parse (src /*: string | Buffer */, options /*: ?DotenvParseOptions */) /*: DotenvParseOutput */ {\n  const debug = Boolean(options && options.debug)\n  const obj = {}\n\n  // convert Buffers before splitting into lines and processing\n  src.toString().split('\\n').forEach(function (line, idx) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    const keyValueArr = line.match(/^\\s*([\\w.-]+)\\s*=\\s*(.*)?\\s*$/)\n    // matched?\n    if (keyValueArr != null) {\n      const key = keyValueArr[1]\n\n      // default undefined or missing values to empty string\n      let value = keyValueArr[2] || ''\n\n      // expand newlines in quoted values\n      const len = value ? value.length : 0\n      if (len > 0 && value.charAt(0) === '\"' && value.charAt(len - 1) === '\"') {\n        value = value.replace(/\\\\n/gm, '\\n')\n      }\n\n      // remove any surrounding quotes and extra spaces\n      value = value.replace(/(^['\"]|['\"]$)/g, '').trim()\n\n      obj[key] = value\n    } else if (debug) {\n      log(`did not match key and value when parsing line ${idx + 1}: ${line}`)\n    }\n  })\n\n  return obj\n}\n\n// Populates process.env from .env file\nfunction config (options /*: ?DotenvConfigOptions */) /*: DotenvConfigOutput */ {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding /*: string */ = 'utf8'\n  let debug = false\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = options.path\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n    if (options.debug != null) {\n      debug = true\n    }\n  }\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = parse(fs.readFileSync(dotenvPath, { encoding }), { debug })\n\n    Object.keys(parsed).forEach(function (key) {\n      if (!process.env.hasOwnProperty(key)) {\n        process.env[key] = parsed[key]\n      } else if (debug) {\n        log(`\"${key}\" is already defined in \\`process.env\\` and will not be overwritten`)\n      }\n    })\n\n    return { parsed }\n  } catch (e) {\n    return { error: e }\n  }\n}\n\nmodule.exports.config = config\nmodule.exports.load = config\nmodule.exports.parse = parse\n"]},"metadata":{},"sourceType":"script"}
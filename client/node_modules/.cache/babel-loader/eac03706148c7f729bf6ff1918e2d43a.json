{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tlarr\\\\ffwebsite\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render( /*#__PURE__*/React.createElement(React.StrictMode, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }\n})), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n\nrequire('dotenv').config();\n\nconst express = require('express');\n\nconst path = require('path');\n\nconst cors = require('cors');\n\nconst bodyParser = require('body-parser');\n\nconst session = require('express-session');\n\nconst {\n  ExpressOIDC\n} = require('@okta/oidc-middleware');\n\nconst app = express();\nconst port = 3000; // session support is required to use ExpressOIDC\n\napp.use(session({\n  secret: process.env.RANDOM_SECRET_WORD,\n  resave: true,\n  saveUninitialized: false\n}));\nconst oidc = new ExpressOIDC({\n  issuer: `${process.env.OKTA_ORG_URL}/oauth2/default`,\n  client_id: process.env.OKTA_CLIENT_ID,\n  client_secret: process.env.OKTA_CLIENT_SECRET,\n  redirect_uri: process.env.REDIRECT_URL,\n  scope: 'openid profile',\n  routes: {\n    callback: {\n      path: '/authorization-code/callback',\n      defaultRedirect: '/admin'\n    }\n  }\n}); // ExpressOIDC will attach handlers for the /login and /authorization-code/callback routes\n\napp.use(oidc.router);\napp.use(cors());\napp.use(bodyParser.json());\napp.get('/', (req, res) => {\n  res.send('<h1>Welcome!!</h1>');\n});\napp.listen(port, () => console.log(`My Blog App listening on port ${port}!`));","map":{"version":3,"sources":["C:/Users/tlarr/ffwebsite/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","render","document","getElementById","unregister","require","config","express","path","cors","bodyParser","session","ExpressOIDC","app","port","use","secret","process","env","RANDOM_SECRET_WORD","resave","saveUninitialized","oidc","issuer","OKTA_ORG_URL","client_id","OKTA_CLIENT_ID","client_secret","OKTA_CLIENT_SECRET","redirect_uri","REDIRECT_URL","scope","routes","callback","defaultRedirect","router","json","get","req","res","send","listen","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,iBAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,OAAO,sCAAP;AAEAF,QAAQ,CAACG,MAAT,eACE,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,EAIEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF,E,CAOA;AACA;AACA;;AACAH,aAAa,CAACI,UAAd;;AAGAC,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AACA,MAAMC,OAAO,GAAGF,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMI,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMK,UAAU,GAAGL,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAMM,OAAO,GAAGN,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAM;AAAEO,EAAAA;AAAF,IAAkBP,OAAO,CAAC,uBAAD,CAA/B;;AACA,MAAMQ,GAAG,GAAGN,OAAO,EAAnB;AACA,MAAMO,IAAI,GAAG,IAAb,C,CAEA;;AACAD,GAAG,CAACE,GAAJ,CAAQJ,OAAO,CAAC;AACdK,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,kBADN;AAEdC,EAAAA,MAAM,EAAE,IAFM;AAGdC,EAAAA,iBAAiB,EAAE;AAHL,CAAD,CAAf;AAMA,MAAMC,IAAI,GAAG,IAAIV,WAAJ,CAAgB;AAC3BW,EAAAA,MAAM,EAAG,GAAEN,OAAO,CAACC,GAAR,CAAYM,YAAa,iBADT;AAE3BC,EAAAA,SAAS,EAAER,OAAO,CAACC,GAAR,CAAYQ,cAFI;AAG3BC,EAAAA,aAAa,EAAEV,OAAO,CAACC,GAAR,CAAYU,kBAHA;AAI3BC,EAAAA,YAAY,EAAEZ,OAAO,CAACC,GAAR,CAAYY,YAJC;AAK3BC,EAAAA,KAAK,EAAE,gBALoB;AAM3BC,EAAAA,MAAM,EAAE;AACNC,IAAAA,QAAQ,EAAE;AACRzB,MAAAA,IAAI,EAAE,8BADE;AAER0B,MAAAA,eAAe,EAAE;AAFT;AADJ;AANmB,CAAhB,CAAb,C,CAcA;;AACArB,GAAG,CAACE,GAAJ,CAAQO,IAAI,CAACa,MAAb;AACAtB,GAAG,CAACE,GAAJ,CAAQN,IAAI,EAAZ;AACAI,GAAG,CAACE,GAAJ,CAAQL,UAAU,CAAC0B,IAAX,EAAR;AAEAvB,GAAG,CAACwB,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzBA,EAAAA,GAAG,CAACC,IAAJ,CAAS,oBAAT;AACD,CAFD;AAIA3B,GAAG,CAAC4B,MAAJ,CAAW3B,IAAX,EAAiB,MAAM4B,OAAO,CAACC,GAAR,CAAa,iCAAgC7B,IAAK,GAAlD,CAAvB","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\nrequire('dotenv').config();\nconst express = require('express');\nconst path = require('path');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\nconst session = require('express-session');\nconst { ExpressOIDC } = require('@okta/oidc-middleware');\nconst app = express();\nconst port = 3000;\n\n// session support is required to use ExpressOIDC\napp.use(session({\n  secret: process.env.RANDOM_SECRET_WORD,\n  resave: true,\n  saveUninitialized: false\n}));\n\nconst oidc = new ExpressOIDC({\n  issuer: `${process.env.OKTA_ORG_URL}/oauth2/default`,\n  client_id: process.env.OKTA_CLIENT_ID,\n  client_secret: process.env.OKTA_CLIENT_SECRET,\n  redirect_uri: process.env.REDIRECT_URL,\n  scope: 'openid profile',\n  routes: {\n    callback: {\n      path: '/authorization-code/callback',\n      defaultRedirect: '/admin'\n    }\n  }\n});\n\n// ExpressOIDC will attach handlers for the /login and /authorization-code/callback routes\napp.use(oidc.router);\napp.use(cors());\napp.use(bodyParser.json());\n\napp.get('/', (req, res) => {\n  res.send('<h1>Welcome!!</h1>');\n});\n\napp.listen(port, () => console.log(`My Blog App listening on port ${port}!`))"]},"metadata":{},"sourceType":"module"}
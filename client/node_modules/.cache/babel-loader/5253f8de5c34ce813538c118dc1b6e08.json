{"ast":null,"code":"/*!\n * express-session\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar Store = require('./store');\n\nvar util = require('util');\n/**\n * Shim setImmediate for node.js < 0.10\n * @private\n */\n\n/* istanbul ignore next */\n\n\nvar defer = typeof setImmediate === 'function' ? setImmediate : function (fn) {\n  process.nextTick(fn.bind.apply(fn, arguments));\n};\n/**\n * Module exports.\n */\n\nmodule.exports = MemoryStore;\n/**\n * A session store in memory.\n * @public\n */\n\nfunction MemoryStore() {\n  Store.call(this);\n  this.sessions = Object.create(null);\n}\n/**\n * Inherit from Store.\n */\n\n\nutil.inherits(MemoryStore, Store);\n/**\n * Get all active sessions.\n *\n * @param {function} callback\n * @public\n */\n\nMemoryStore.prototype.all = function all(callback) {\n  var sessionIds = Object.keys(this.sessions);\n  var sessions = Object.create(null);\n\n  for (var i = 0; i < sessionIds.length; i++) {\n    var sessionId = sessionIds[i];\n    var session = getSession.call(this, sessionId);\n\n    if (session) {\n      sessions[sessionId] = session;\n    }\n  }\n\n  callback && defer(callback, null, sessions);\n};\n/**\n * Clear all sessions.\n *\n * @param {function} callback\n * @public\n */\n\n\nMemoryStore.prototype.clear = function clear(callback) {\n  this.sessions = Object.create(null);\n  callback && defer(callback);\n};\n/**\n * Destroy the session associated with the given session ID.\n *\n * @param {string} sessionId\n * @public\n */\n\n\nMemoryStore.prototype.destroy = function destroy(sessionId, callback) {\n  delete this.sessions[sessionId];\n  callback && defer(callback);\n};\n/**\n * Fetch session by the given session ID.\n *\n * @param {string} sessionId\n * @param {function} callback\n * @public\n */\n\n\nMemoryStore.prototype.get = function get(sessionId, callback) {\n  defer(callback, null, getSession.call(this, sessionId));\n};\n/**\n * Commit the given session associated with the given sessionId to the store.\n *\n * @param {string} sessionId\n * @param {object} session\n * @param {function} callback\n * @public\n */\n\n\nMemoryStore.prototype.set = function set(sessionId, session, callback) {\n  this.sessions[sessionId] = JSON.stringify(session);\n  callback && defer(callback);\n};\n/**\n * Get number of active sessions.\n *\n * @param {function} callback\n * @public\n */\n\n\nMemoryStore.prototype.length = function length(callback) {\n  this.all(function (err, sessions) {\n    if (err) return callback(err);\n    callback(null, Object.keys(sessions).length);\n  });\n};\n/**\n * Touch the given session object associated with the given session ID.\n *\n * @param {string} sessionId\n * @param {object} session\n * @param {function} callback\n * @public\n */\n\n\nMemoryStore.prototype.touch = function touch(sessionId, session, callback) {\n  var currentSession = getSession.call(this, sessionId);\n\n  if (currentSession) {\n    // update expiration\n    currentSession.cookie = session.cookie;\n    this.sessions[sessionId] = JSON.stringify(currentSession);\n  }\n\n  callback && defer(callback);\n};\n/**\n * Get session from the store.\n * @private\n */\n\n\nfunction getSession(sessionId) {\n  var sess = this.sessions[sessionId];\n\n  if (!sess) {\n    return;\n  } // parse\n\n\n  sess = JSON.parse(sess);\n  var expires = typeof sess.cookie.expires === 'string' ? new Date(sess.cookie.expires) : sess.cookie.expires; // destroy expired session\n\n  if (expires && expires <= Date.now()) {\n    delete this.sessions[sessionId];\n    return;\n  }\n\n  return sess;\n}","map":{"version":3,"sources":["C:/Users/tlarr/ffwebsite/node_modules/express-session/session/memory.js"],"names":["Store","require","util","defer","setImmediate","fn","process","nextTick","bind","apply","arguments","module","exports","MemoryStore","call","sessions","Object","create","inherits","prototype","all","callback","sessionIds","keys","i","length","sessionId","session","getSession","clear","destroy","get","set","JSON","stringify","err","touch","currentSession","cookie","sess","parse","expires","Date","now"],"mappings":"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","sourcesContent":["/*!\n * express-session\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar Store = require('./store')\nvar util = require('util')\n\n/**\n * Shim setImmediate for node.js < 0.10\n * @private\n */\n\n/* istanbul ignore next */\nvar defer = typeof setImmediate === 'function'\n  ? setImmediate\n  : function(fn){ process.nextTick(fn.bind.apply(fn, arguments)) }\n\n/**\n * Module exports.\n */\n\nmodule.exports = MemoryStore\n\n/**\n * A session store in memory.\n * @public\n */\n\nfunction MemoryStore() {\n  Store.call(this)\n  this.sessions = Object.create(null)\n}\n\n/**\n * Inherit from Store.\n */\n\nutil.inherits(MemoryStore, Store)\n\n/**\n * Get all active sessions.\n *\n * @param {function} callback\n * @public\n */\n\nMemoryStore.prototype.all = function all(callback) {\n  var sessionIds = Object.keys(this.sessions)\n  var sessions = Object.create(null)\n\n  for (var i = 0; i < sessionIds.length; i++) {\n    var sessionId = sessionIds[i]\n    var session = getSession.call(this, sessionId)\n\n    if (session) {\n      sessions[sessionId] = session;\n    }\n  }\n\n  callback && defer(callback, null, sessions)\n}\n\n/**\n * Clear all sessions.\n *\n * @param {function} callback\n * @public\n */\n\nMemoryStore.prototype.clear = function clear(callback) {\n  this.sessions = Object.create(null)\n  callback && defer(callback)\n}\n\n/**\n * Destroy the session associated with the given session ID.\n *\n * @param {string} sessionId\n * @public\n */\n\nMemoryStore.prototype.destroy = function destroy(sessionId, callback) {\n  delete this.sessions[sessionId]\n  callback && defer(callback)\n}\n\n/**\n * Fetch session by the given session ID.\n *\n * @param {string} sessionId\n * @param {function} callback\n * @public\n */\n\nMemoryStore.prototype.get = function get(sessionId, callback) {\n  defer(callback, null, getSession.call(this, sessionId))\n}\n\n/**\n * Commit the given session associated with the given sessionId to the store.\n *\n * @param {string} sessionId\n * @param {object} session\n * @param {function} callback\n * @public\n */\n\nMemoryStore.prototype.set = function set(sessionId, session, callback) {\n  this.sessions[sessionId] = JSON.stringify(session)\n  callback && defer(callback)\n}\n\n/**\n * Get number of active sessions.\n *\n * @param {function} callback\n * @public\n */\n\nMemoryStore.prototype.length = function length(callback) {\n  this.all(function (err, sessions) {\n    if (err) return callback(err)\n    callback(null, Object.keys(sessions).length)\n  })\n}\n\n/**\n * Touch the given session object associated with the given session ID.\n *\n * @param {string} sessionId\n * @param {object} session\n * @param {function} callback\n * @public\n */\n\nMemoryStore.prototype.touch = function touch(sessionId, session, callback) {\n  var currentSession = getSession.call(this, sessionId)\n\n  if (currentSession) {\n    // update expiration\n    currentSession.cookie = session.cookie\n    this.sessions[sessionId] = JSON.stringify(currentSession)\n  }\n\n  callback && defer(callback)\n}\n\n/**\n * Get session from the store.\n * @private\n */\n\nfunction getSession(sessionId) {\n  var sess = this.sessions[sessionId]\n\n  if (!sess) {\n    return\n  }\n\n  // parse\n  sess = JSON.parse(sess)\n\n  var expires = typeof sess.cookie.expires === 'string'\n    ? new Date(sess.cookie.expires)\n    : sess.cookie.expires\n\n  // destroy expired session\n  if (expires && expires <= Date.now()) {\n    delete this.sessions[sessionId]\n    return\n  }\n\n  return sess\n}\n"]},"metadata":{},"sourceType":"script"}
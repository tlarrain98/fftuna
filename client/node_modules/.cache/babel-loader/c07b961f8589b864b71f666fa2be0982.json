{"ast":null,"code":"const espnRequest = require('./espn-request');\n\nfunction getLeagueStandings(cookies, leagueId, season = 2018) {\n  let url = 'http://games.espn.com/ffl/api/v2/standings?leagueId=' + leagueId + '&seasonId=' + season;\n  return espnRequest.requestToPromise(url, cookies);\n}\n\nfunction getOverallStandings(cookies, leagueId, season = 2018) {\n  return getLeagueStandings(cookies, leagueId, season).then(standings => {\n    return standings.teams.map(team => {\n      return {\n        teamLocation: team.teamLocation,\n        teamNickname: team.teamNickname,\n        teamId: team.teamId,\n        overallStanding: team.overallStanding,\n        divisionStanding: team.divisionStanding,\n        wins: team.record.overallWins,\n        losses: team.record.overallLosses,\n        streakLength: team.record.streakLength,\n        streakType: team.record.streakType,\n        pointsFor: team.record.pointsFor,\n        pointsAgainst: team.record.pointsAgainst\n      };\n    });\n  }).then(standings => {\n    return standings.sort((x, y) => {\n      return x.overallStanding - y.overallStanding;\n    });\n  });\n}\n\nmodule.exports = {\n  getLeagueStandings: getLeagueStandings,\n  getOverallStandings: getOverallStandings\n};","map":{"version":3,"sources":["C:/Users/tlarr/ffwebsite/node_modules/espn-ff-api-2/standings.js"],"names":["espnRequest","require","getLeagueStandings","cookies","leagueId","season","url","requestToPromise","getOverallStandings","then","standings","teams","map","team","teamLocation","teamNickname","teamId","overallStanding","divisionStanding","wins","record","overallWins","losses","overallLosses","streakLength","streakType","pointsFor","pointsAgainst","sort","x","y","module","exports"],"mappings":"AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAA3B;;AAEA,SAASC,kBAAT,CAA4BC,OAA5B,EAAqCC,QAArC,EAA+CC,MAAM,GAAG,IAAxD,EAA6D;AAC3D,MAAIC,GAAG,GAAG,yDAAyDF,QAAzD,GAAoE,YAApE,GAAmFC,MAA7F;AACA,SAAOL,WAAW,CAACO,gBAAZ,CAA6BD,GAA7B,EAAkCH,OAAlC,CAAP;AACD;;AAED,SAASK,mBAAT,CAA6BL,OAA7B,EAAsCC,QAAtC,EAAgDC,MAAM,GAAG,IAAzD,EAA8D;AAC5D,SAAOH,kBAAkB,CAACC,OAAD,EAAUC,QAAV,EAAoBC,MAApB,CAAlB,CACJI,IADI,CACCC,SAAS,IAAI;AACjB,WAAOA,SAAS,CAACC,KAAV,CAAgBC,GAAhB,CAAoBC,IAAI,IAAI;AACjC,aAAO;AACCC,QAAAA,YAAY,EAAMD,IAAI,CAACC,YADxB;AAECC,QAAAA,YAAY,EAAMF,IAAI,CAACE,YAFxB;AAGCC,QAAAA,MAAM,EAAYH,IAAI,CAACG,MAHxB;AAICC,QAAAA,eAAe,EAAGJ,IAAI,CAACI,eAJxB;AAKCC,QAAAA,gBAAgB,EAAEL,IAAI,CAACK,gBALxB;AAMCC,QAAAA,IAAI,EAAcN,IAAI,CAACO,MAAL,CAAYC,WAN/B;AAOCC,QAAAA,MAAM,EAAYT,IAAI,CAACO,MAAL,CAAYG,aAP/B;AAQCC,QAAAA,YAAY,EAAMX,IAAI,CAACO,MAAL,CAAYI,YAR/B;AASCC,QAAAA,UAAU,EAAQZ,IAAI,CAACO,MAAL,CAAYK,UAT/B;AAUCC,QAAAA,SAAS,EAASb,IAAI,CAACO,MAAL,CAAYM,SAV/B;AAWCC,QAAAA,aAAa,EAAKd,IAAI,CAACO,MAAL,CAAYO;AAX/B,OAAP;AAaD,KAdM,CAAP;AAeD,GAjBI,EAkBJlB,IAlBI,CAkBCC,SAAS,IAAI;AACjB,WAAOA,SAAS,CAACkB,IAAV,CAAe,CAACC,CAAD,EAAGC,CAAH,KAAS;AAC7B,aAAOD,CAAC,CAACZ,eAAF,GAAoBa,CAAC,CAACb,eAA7B;AACD,KAFM,CAAP;AAGD,GAtBI,CAAP;AAuBD;;AAEDc,MAAM,CAACC,OAAP,GAAiB;AACf9B,EAAAA,kBAAkB,EAAIA,kBADP;AAEfM,EAAAA,mBAAmB,EAAGA;AAFP,CAAjB","sourcesContent":["const espnRequest = require('./espn-request');\n\nfunction getLeagueStandings(cookies, leagueId, season = 2018){\n  let url = 'http://games.espn.com/ffl/api/v2/standings?leagueId=' + leagueId + '&seasonId=' + season;\n  return espnRequest.requestToPromise(url, cookies);\n}\n\nfunction getOverallStandings(cookies, leagueId, season = 2018){\n  return getLeagueStandings(cookies, leagueId, season)\n    .then(standings => {\n      return standings.teams.map(team => {\n        return {\n                teamLocation    : team.teamLocation,\n                teamNickname    : team.teamNickname,\n                teamId          : team.teamId,\n                overallStanding : team.overallStanding,\n                divisionStanding: team.divisionStanding,\n                wins            : team.record.overallWins,\n                losses          : team.record.overallLosses,\n                streakLength    : team.record.streakLength,\n                streakType      : team.record.streakType,\n                pointsFor       : team.record.pointsFor,\n                pointsAgainst   : team.record.pointsAgainst\n              };\n      });\n    })\n    .then(standings => {\n      return standings.sort((x,y) => {\n        return x.overallStanding - y.overallStanding;\n      });\n    });\n}\n\nmodule.exports = {\n  getLeagueStandings  : getLeagueStandings,\n  getOverallStandings : getOverallStandings\n}\n"]},"metadata":{},"sourceType":"script"}
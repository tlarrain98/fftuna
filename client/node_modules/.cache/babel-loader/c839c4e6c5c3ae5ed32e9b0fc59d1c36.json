{"ast":null,"code":"/*!\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nconst passport = require('passport');\n\nconst OpenIdClientStrategy = require('openid-client').Strategy;\n\nconst Issuer = require('openid-client').Issuer;\n\nconst ensureLoggedIn = require('connect-ensure-login').ensureLoggedIn;\n\nconst Negotiator = require('negotiator');\n\nconst os = require('os');\n\nconst pkg = require('../package.json');\n/**\n * Parse out the default user agent for the openid-client library, which currently looks like:\n *\n * openid-client/1.15.0 (https://github.com/panva/node-openid-client)\n *\n * We strip off the github link because it's not necessary.\n */\n\n\nlet clientUserAgent = Issuer.defaultHttpOptions.headers['User-Agent'];\n\nif (typeof clientUserAgent === 'string' && clientUserAgent) {\n  clientUserAgent = ' ' + clientUserAgent.split(' ')[0];\n} else {\n  clientUserAgent = '';\n}\n\nconst userAgent = `${pkg.name}/${pkg.version}${clientUserAgent} node/${process.versions.node} ${os.platform()}/${os.release()}`;\nIssuer.defaultHttpOptions.headers['User-Agent'] = userAgent;\nconst oidcUtil = module.exports;\n\noidcUtil.createClient = context => {\n  const {\n    issuer,\n    client_id,\n    client_secret,\n    redirect_uri,\n    maxClockSkew,\n    timeout\n  } = context.options;\n  Issuer.defaultHttpOptions.timeout = timeout || 10000;\n  return Issuer.discover(issuer).then(iss => {\n    const client = new iss.Client({\n      client_id,\n      client_secret,\n      redirect_uris: [redirect_uri]\n    });\n    client.CLOCK_TOLERANCE = maxClockSkew;\n    return client;\n  });\n};\n\noidcUtil.bootstrapPassportStrategy = context => {\n  const oidcStrategy = new OpenIdClientStrategy({\n    params: {\n      scope: context.options.scope\n    },\n    sessionKey: context.options.sessionKey,\n    client: context.client\n  }, (tokenSet, userinfo, done) => {\n    return tokenSet && userinfo ? done(null, {\n      userinfo: userinfo,\n      tokens: tokenSet\n    }) : done(null);\n  }); // bypass passport's serializers\n\n  passport.serializeUser((user, done) => done(null, user));\n  passport.deserializeUser((user, done) => done(null, user));\n  passport.use('oidc', oidcStrategy);\n};\n\noidcUtil.ensureAuthenticated = (context, options) => {\n  options = options || context.options.routes.login.path;\n  return (req, res, next) => {\n    if (req.isAuthenticated && req.isAuthenticated()) {\n      return next();\n    }\n\n    const negotiator = new Negotiator(req);\n\n    if (negotiator.mediaType() === 'text/html') {\n      ensureLoggedIn(options)(req, res, next);\n    } else {\n      res.sendStatus(401);\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/tlarr/ffwebsite/node_modules/@okta/oidc-middleware/src/oidcUtil.js"],"names":["passport","require","OpenIdClientStrategy","Strategy","Issuer","ensureLoggedIn","Negotiator","os","pkg","clientUserAgent","defaultHttpOptions","headers","split","userAgent","name","version","process","versions","node","platform","release","oidcUtil","module","exports","createClient","context","issuer","client_id","client_secret","redirect_uri","maxClockSkew","timeout","options","discover","then","iss","client","Client","redirect_uris","CLOCK_TOLERANCE","bootstrapPassportStrategy","oidcStrategy","params","scope","sessionKey","tokenSet","userinfo","done","tokens","serializeUser","user","deserializeUser","use","ensureAuthenticated","routes","login","path","req","res","next","isAuthenticated","negotiator","mediaType","sendStatus"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nconst passport = require('passport');\nconst OpenIdClientStrategy = require('openid-client').Strategy;\nconst Issuer = require('openid-client').Issuer;\nconst ensureLoggedIn = require('connect-ensure-login').ensureLoggedIn;\nconst Negotiator = require('negotiator');\nconst os = require('os');\n\nconst pkg = require('../package.json');\n\n/**\n * Parse out the default user agent for the openid-client library, which currently looks like:\n *\n * openid-client/1.15.0 (https://github.com/panva/node-openid-client)\n *\n * We strip off the github link because it's not necessary.\n */\nlet clientUserAgent = Issuer.defaultHttpOptions.headers['User-Agent'];\nif (typeof clientUserAgent === 'string' && clientUserAgent) {\n  clientUserAgent = ' ' + clientUserAgent.split(' ')[0]\n} else {\n  clientUserAgent = '';\n}\n\nconst userAgent = `${pkg.name}/${pkg.version}${clientUserAgent} node/${process.versions.node} ${os.platform()}/${os.release()}`;\n\nIssuer.defaultHttpOptions.headers['User-Agent'] = userAgent;\n\nconst oidcUtil = module.exports;\n\noidcUtil.createClient = context => {\n  const {\n    issuer,\n    client_id,\n    client_secret,\n    redirect_uri,\n    maxClockSkew,\n    timeout\n  } = context.options;\n\n  Issuer.defaultHttpOptions.timeout = timeout || 10000;\n\n  return Issuer.discover(issuer)\n  .then(iss => {\n    const client = new iss.Client({\n      client_id,\n      client_secret,\n      redirect_uris: [\n        redirect_uri\n      ]\n    });\n\n    client.CLOCK_TOLERANCE = maxClockSkew;\n\n    return client;\n  });\n};\n\noidcUtil.bootstrapPassportStrategy = context => {\n  const oidcStrategy = new OpenIdClientStrategy({\n    params: {\n      scope: context.options.scope\n    },\n    sessionKey: context.options.sessionKey,\n    client: context.client\n  }, (tokenSet, userinfo, done) => {\n    return tokenSet && userinfo\n      ? done(null, {\n        userinfo: userinfo,\n        tokens: tokenSet\n      })\n      : done(null);\n  });\n\n  // bypass passport's serializers\n  passport.serializeUser((user, done) => done(null, user));\n  passport.deserializeUser((user, done) => done(null, user));\n  passport.use('oidc', oidcStrategy);\n}\n\noidcUtil.ensureAuthenticated = (context, options) => {\n  options = options || context.options.routes.login.path;\n  return (req, res, next) => {\n    if (req.isAuthenticated && req.isAuthenticated()) {\n      return next();\n    }\n    const negotiator = new Negotiator(req);\n    if (negotiator.mediaType() === 'text/html') {\n      ensureLoggedIn(options)(req, res, next);\n    } else {\n      res.sendStatus(401);\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"script"}
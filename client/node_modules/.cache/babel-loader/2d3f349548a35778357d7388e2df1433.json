{"ast":null,"code":"/*!\n * Connect - session - Cookie\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n */\n\nvar merge = require('utils-merge'),\n    cookie = require('cookie');\n/**\n * Initialize a new `Cookie` with the given `options`.\n *\n * @param {IncomingMessage} req\n * @param {Object} options\n * @api private\n */\n\n\nvar Cookie = module.exports = function Cookie(options) {\n  this.path = '/';\n  this.maxAge = null;\n  this.httpOnly = true;\n  if (options) merge(this, options);\n  this.originalMaxAge = undefined == this.originalMaxAge ? this.maxAge : this.originalMaxAge;\n};\n/*!\n * Prototype.\n */\n\n\nCookie.prototype = {\n  /**\n   * Set expires `date`.\n   *\n   * @param {Date} date\n   * @api public\n   */\n  set expires(date) {\n    this._expires = date;\n    this.originalMaxAge = this.maxAge;\n  },\n\n  /**\n   * Get expires `date`.\n   *\n   * @return {Date}\n   * @api public\n   */\n  get expires() {\n    return this._expires;\n  },\n\n  /**\n   * Set expires via max-age in `ms`.\n   *\n   * @param {Number} ms\n   * @api public\n   */\n  set maxAge(ms) {\n    this.expires = 'number' == typeof ms ? new Date(Date.now() + ms) : ms;\n  },\n\n  /**\n   * Get expires max-age in `ms`.\n   *\n   * @return {Number}\n   * @api public\n   */\n  get maxAge() {\n    return this.expires instanceof Date ? this.expires.valueOf() - Date.now() : this.expires;\n  },\n\n  /**\n   * Return cookie data object.\n   *\n   * @return {Object}\n   * @api private\n   */\n  get data() {\n    return {\n      originalMaxAge: this.originalMaxAge,\n      expires: this._expires,\n      secure: this.secure,\n      httpOnly: this.httpOnly,\n      domain: this.domain,\n      path: this.path,\n      sameSite: this.sameSite\n    };\n  },\n\n  /**\n   * Return a serialized cookie string.\n   *\n   * @return {String}\n   * @api public\n   */\n  serialize: function (name, val) {\n    return cookie.serialize(name, val, this.data);\n  },\n\n  /**\n   * Return JSON representation of this cookie.\n   *\n   * @return {Object}\n   * @api private\n   */\n  toJSON: function () {\n    return this.data;\n  }\n};","map":{"version":3,"sources":["C:/Users/tlarr/ffwebsite/node_modules/express-session/session/cookie.js"],"names":["merge","require","cookie","Cookie","module","exports","options","path","maxAge","httpOnly","originalMaxAge","undefined","prototype","expires","date","_expires","ms","Date","now","valueOf","data","secure","domain","sameSite","serialize","name","val","toJSON"],"mappings":"AAAA;;;;;;AAOA;AAEA;;;;AAIA,IAAIA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAAnB;AAAA,IACIC,MAAM,GAAGD,OAAO,CAAC,QAAD,CADpB;AAGA;;;;;;;;;AAQA,IAAIE,MAAM,GAAGC,MAAM,CAACC,OAAP,GAAiB,SAASF,MAAT,CAAgBG,OAAhB,EAAyB;AACrD,OAAKC,IAAL,GAAY,GAAZ;AACA,OAAKC,MAAL,GAAc,IAAd;AACA,OAAKC,QAAL,GAAgB,IAAhB;AACA,MAAIH,OAAJ,EAAaN,KAAK,CAAC,IAAD,EAAOM,OAAP,CAAL;AACb,OAAKI,cAAL,GAAsBC,SAAS,IAAI,KAAKD,cAAlB,GAClB,KAAKF,MADa,GAElB,KAAKE,cAFT;AAGD,CARD;AAUA;;;;;AAIAP,MAAM,CAACS,SAAP,GAAmB;AAEjB;;;;;;AAOA,MAAIC,OAAJ,CAAYC,IAAZ,EAAkB;AAChB,SAAKC,QAAL,GAAgBD,IAAhB;AACA,SAAKJ,cAAL,GAAsB,KAAKF,MAA3B;AACD,GAZgB;;AAcjB;;;;;;AAOA,MAAIK,OAAJ,GAAc;AACZ,WAAO,KAAKE,QAAZ;AACD,GAvBgB;;AAyBjB;;;;;;AAOA,MAAIP,MAAJ,CAAWQ,EAAX,EAAe;AACb,SAAKH,OAAL,GAAe,YAAY,OAAOG,EAAnB,GACX,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,KAAaF,EAAtB,CADW,GAEXA,EAFJ;AAGD,GApCgB;;AAsCjB;;;;;;AAOA,MAAIR,MAAJ,GAAa;AACX,WAAO,KAAKK,OAAL,YAAwBI,IAAxB,GACH,KAAKJ,OAAL,CAAaM,OAAb,KAAyBF,IAAI,CAACC,GAAL,EADtB,GAEH,KAAKL,OAFT;AAGD,GAjDgB;;AAmDjB;;;;;;AAOA,MAAIO,IAAJ,GAAW;AACT,WAAO;AACLV,MAAAA,cAAc,EAAE,KAAKA,cADhB;AAEHG,MAAAA,OAAO,EAAE,KAAKE,QAFX;AAGHM,MAAAA,MAAM,EAAE,KAAKA,MAHV;AAIHZ,MAAAA,QAAQ,EAAE,KAAKA,QAJZ;AAKHa,MAAAA,MAAM,EAAE,KAAKA,MALV;AAMHf,MAAAA,IAAI,EAAE,KAAKA,IANR;AAOHgB,MAAAA,QAAQ,EAAE,KAAKA;AAPZ,KAAP;AASD,GApEgB;;AAsEjB;;;;;;AAOAC,EAAAA,SAAS,EAAE,UAASC,IAAT,EAAeC,GAAf,EAAmB;AAC5B,WAAOxB,MAAM,CAACsB,SAAP,CAAiBC,IAAjB,EAAuBC,GAAvB,EAA4B,KAAKN,IAAjC,CAAP;AACD,GA/EgB;;AAiFjB;;;;;;AAOAO,EAAAA,MAAM,EAAE,YAAU;AAChB,WAAO,KAAKP,IAAZ;AACD;AA1FgB,CAAnB","sourcesContent":["/*!\n * Connect - session - Cookie\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar merge = require('utils-merge')\n  , cookie = require('cookie');\n\n/**\n * Initialize a new `Cookie` with the given `options`.\n *\n * @param {IncomingMessage} req\n * @param {Object} options\n * @api private\n */\n\nvar Cookie = module.exports = function Cookie(options) {\n  this.path = '/';\n  this.maxAge = null;\n  this.httpOnly = true;\n  if (options) merge(this, options);\n  this.originalMaxAge = undefined == this.originalMaxAge\n    ? this.maxAge\n    : this.originalMaxAge;\n};\n\n/*!\n * Prototype.\n */\n\nCookie.prototype = {\n\n  /**\n   * Set expires `date`.\n   *\n   * @param {Date} date\n   * @api public\n   */\n\n  set expires(date) {\n    this._expires = date;\n    this.originalMaxAge = this.maxAge;\n  },\n\n  /**\n   * Get expires `date`.\n   *\n   * @return {Date}\n   * @api public\n   */\n\n  get expires() {\n    return this._expires;\n  },\n\n  /**\n   * Set expires via max-age in `ms`.\n   *\n   * @param {Number} ms\n   * @api public\n   */\n\n  set maxAge(ms) {\n    this.expires = 'number' == typeof ms\n      ? new Date(Date.now() + ms)\n      : ms;\n  },\n\n  /**\n   * Get expires max-age in `ms`.\n   *\n   * @return {Number}\n   * @api public\n   */\n\n  get maxAge() {\n    return this.expires instanceof Date\n      ? this.expires.valueOf() - Date.now()\n      : this.expires;\n  },\n\n  /**\n   * Return cookie data object.\n   *\n   * @return {Object}\n   * @api private\n   */\n\n  get data() {\n    return {\n      originalMaxAge: this.originalMaxAge\n      , expires: this._expires\n      , secure: this.secure\n      , httpOnly: this.httpOnly\n      , domain: this.domain\n      , path: this.path\n      , sameSite: this.sameSite\n    }\n  },\n\n  /**\n   * Return a serialized cookie string.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  serialize: function(name, val){\n    return cookie.serialize(name, val, this.data);\n  },\n\n  /**\n   * Return JSON representation of this cookie.\n   *\n   * @return {Object}\n   * @api private\n   */\n\n  toJSON: function(){\n    return this.data;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}
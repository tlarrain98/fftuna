{"ast":null,"code":"/*!\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nconst EventEmitter = require('events').EventEmitter;\n\nconst _ = require('lodash');\n\nconst oidcUtil = require('./oidcUtil');\n\nconst connectUtil = require('./connectUtil');\n\nconst {\n  assertIssuer,\n  assertClientId,\n  assertClientSecret,\n  assertRedirectUri\n} = require('@okta/configuration-validation');\n/**\n * Class to easily integrate OpenId Connect with Express\n *\n * @class ExpressOIDC\n */\n\n\nmodule.exports = class ExpressOIDC extends EventEmitter {\n  /**\n   * Creates an instance of ExpressOIDC\n   *\n   * @param {Object} options\n   * @param {string} options.issuer The OpenId Connect issuer\n   * @param {string} options.client_id This app's OpenId Connect client id\n   * @param {string} options.client_secret This app's OpenId Connect client secret\n   * @param {string} options.redirect_uri The location of the authorization callback\n   * @param {string} [options.scope=openid] The scopes that will determine the claims on the tokens\n   * @param {string} [options.response_type=code] The OpenId Connect response type\n   * @param {number} [options.maxClockSkew=120] The maximum discrepancy allowed between server clocks in seconds\n   * @param {Object} [options.testing] Testing overrides for disabling configuration validation\n   * @param {Object} [options.routes]\n   * @param {Object} [options.routes.login]\n   * @param {string} [options.routes.login.path=/login] Path where the login middleware is hosted\n   * @param {Object} [options.routes.callback]\n   * @param {string} [options.routes.callback.path=/authorization-code] Path where the callback middleware is hosted\n   * @param {string} [options.routes.callback.defaultRedirect=/] Where to redirect if there is no returnTo path defined\n   * @param {Function} [options.routes.callback.handler] This handles responses from the OpenId Connect callback\n   */\n  constructor(options = {}) {\n    super();\n    const {\n      issuer,\n      client_id,\n      client_secret,\n      redirect_uri,\n      sessionKey\n    } = options; // Validate the issuer param\n\n    assertIssuer(issuer, options.testing); // Validate the client_id param\n\n    assertClientId(client_id); // Validate the client_secret param\n\n    assertClientSecret(client_secret); // Validate the redirect_uri param\n\n    assertRedirectUri(redirect_uri); // Add defaults to the options\n\n    options = _.merge({\n      response_type: 'code',\n      scope: 'openid',\n      routes: {\n        login: {\n          path: '/login'\n        },\n        callback: {\n          path: '/authorization-code/callback',\n          defaultRedirect: '/'\n        }\n      },\n      sessionKey: sessionKey || `oidc:${options.issuer}`,\n      maxClockSkew: 120\n    }, options);\n    const context = {\n      options\n    };\n    /**\n     * Construct an Express router that should be added to an app\n     *\n     * @instance\n     * @property\n     * @memberof ExpressOIDC\n     */\n\n    this.router = connectUtil.createOIDCRouter(context);\n    /**\n     * Ensure that a user is authenticated before continuing.\n     * If not authenticated, then redirects to the login route.\n     * If not authenticated and not requesting text/html, return a 401.\n     *\n     * @instance\n     * @function\n     * @memberof ExpressOIDC\n     */\n\n    this.ensureAuthenticated = oidcUtil.ensureAuthenticated.bind(null, context); // create client\n\n    oidcUtil.createClient(context).then(client => {\n      context.client = client;\n      oidcUtil.bootstrapPassportStrategy(context);\n      this.emit('ready');\n    }).catch(err => this.emit('error', err));\n  }\n\n};","map":{"version":3,"sources":["C:/Users/tlarr/ffwebsite/node_modules/@okta/oidc-middleware/src/ExpressOIDC.js"],"names":["EventEmitter","require","_","oidcUtil","connectUtil","assertIssuer","assertClientId","assertClientSecret","assertRedirectUri","module","exports","ExpressOIDC","constructor","options","issuer","client_id","client_secret","redirect_uri","sessionKey","testing","merge","response_type","scope","routes","login","path","callback","defaultRedirect","maxClockSkew","context","router","createOIDCRouter","ensureAuthenticated","bind","createClient","then","client","bootstrapPassportStrategy","emit","catch","err"],"mappings":"AAAA;;;;;;;;;;;AAYA,MAAMA,YAAY,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,YAAvC;;AACA,MAAME,CAAC,GAAGD,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,YAAD,CAAxB;;AACA,MAAMG,WAAW,GAAGH,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAM;AACJI,EAAAA,YADI;AAEJC,EAAAA,cAFI;AAGJC,EAAAA,kBAHI;AAIJC,EAAAA;AAJI,IAKFP,OAAO,CAAC,gCAAD,CALX;AAOA;;;;;;;AAKAQ,MAAM,CAACC,OAAP,GAAiB,MAAMC,WAAN,SAA0BX,YAA1B,CAAuC;AAEtD;;;;;;;;;;;;;;;;;;;;AAoBAY,EAAAA,WAAW,CAACC,OAAO,GAAG,EAAX,EAAe;AACxB;AAEA,UAAM;AACJC,MAAAA,MADI;AAEJC,MAAAA,SAFI;AAGJC,MAAAA,aAHI;AAIJC,MAAAA,YAJI;AAKJC,MAAAA;AALI,QAMFL,OANJ,CAHwB,CAWxB;;AACAR,IAAAA,YAAY,CAACS,MAAD,EAASD,OAAO,CAACM,OAAjB,CAAZ,CAZwB,CAcxB;;AACAb,IAAAA,cAAc,CAACS,SAAD,CAAd,CAfwB,CAiBxB;;AACAR,IAAAA,kBAAkB,CAACS,aAAD,CAAlB,CAlBwB,CAoBxB;;AACAR,IAAAA,iBAAiB,CAACS,YAAD,CAAjB,CArBwB,CAuBxB;;AACAJ,IAAAA,OAAO,GAAGX,CAAC,CAACkB,KAAF,CAAQ;AAChBC,MAAAA,aAAa,EAAE,MADC;AAEhBC,MAAAA,KAAK,EAAE,QAFS;AAGhBC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE;AACLC,UAAAA,IAAI,EAAE;AADD,SADD;AAINC,QAAAA,QAAQ,EAAE;AACRD,UAAAA,IAAI,EAAE,8BADE;AAERE,UAAAA,eAAe,EAAE;AAFT;AAJJ,OAHQ;AAYhBT,MAAAA,UAAU,EAAEA,UAAU,IAAK,QAAOL,OAAO,CAACC,MAAO,EAZjC;AAahBc,MAAAA,YAAY,EAAE;AAbE,KAAR,EAcPf,OAdO,CAAV;AAgBA,UAAMgB,OAAO,GAAG;AACdhB,MAAAA;AADc,KAAhB;AAIA;;;;;;;;AAOA,SAAKiB,MAAL,GAAc1B,WAAW,CAAC2B,gBAAZ,CAA6BF,OAA7B,CAAd;AAEA;;;;;;;;;;AASA,SAAKG,mBAAL,GAA2B7B,QAAQ,CAAC6B,mBAAT,CAA6BC,IAA7B,CAAkC,IAAlC,EAAwCJ,OAAxC,CAA3B,CA9DwB,CAgExB;;AACA1B,IAAAA,QAAQ,CAAC+B,YAAT,CAAsBL,OAAtB,EACCM,IADD,CACMC,MAAM,IAAI;AACdP,MAAAA,OAAO,CAACO,MAAR,GAAiBA,MAAjB;AACAjC,MAAAA,QAAQ,CAACkC,yBAAT,CAAmCR,OAAnC;AACA,WAAKS,IAAL,CAAU,OAAV;AACD,KALD,EAMCC,KAND,CAMOC,GAAG,IAAI,KAAKF,IAAL,CAAU,OAAV,EAAmBE,GAAnB,CANd;AAOD;;AA9FqD,CAAxD","sourcesContent":["/*!\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nconst EventEmitter = require('events').EventEmitter;\nconst _ = require('lodash');\nconst oidcUtil = require('./oidcUtil');\nconst connectUtil = require('./connectUtil');\nconst {\n  assertIssuer,\n  assertClientId,\n  assertClientSecret,\n  assertRedirectUri\n} = require('@okta/configuration-validation');\n\n/**\n * Class to easily integrate OpenId Connect with Express\n *\n * @class ExpressOIDC\n */\nmodule.exports = class ExpressOIDC extends EventEmitter {\n\n  /**\n   * Creates an instance of ExpressOIDC\n   *\n   * @param {Object} options\n   * @param {string} options.issuer The OpenId Connect issuer\n   * @param {string} options.client_id This app's OpenId Connect client id\n   * @param {string} options.client_secret This app's OpenId Connect client secret\n   * @param {string} options.redirect_uri The location of the authorization callback\n   * @param {string} [options.scope=openid] The scopes that will determine the claims on the tokens\n   * @param {string} [options.response_type=code] The OpenId Connect response type\n   * @param {number} [options.maxClockSkew=120] The maximum discrepancy allowed between server clocks in seconds\n   * @param {Object} [options.testing] Testing overrides for disabling configuration validation\n   * @param {Object} [options.routes]\n   * @param {Object} [options.routes.login]\n   * @param {string} [options.routes.login.path=/login] Path where the login middleware is hosted\n   * @param {Object} [options.routes.callback]\n   * @param {string} [options.routes.callback.path=/authorization-code] Path where the callback middleware is hosted\n   * @param {string} [options.routes.callback.defaultRedirect=/] Where to redirect if there is no returnTo path defined\n   * @param {Function} [options.routes.callback.handler] This handles responses from the OpenId Connect callback\n   */\n  constructor(options = {}) {\n    super();\n\n    const {\n      issuer,\n      client_id,\n      client_secret,\n      redirect_uri,\n      sessionKey\n    } = options;\n\n    // Validate the issuer param\n    assertIssuer(issuer, options.testing);\n\n    // Validate the client_id param\n    assertClientId(client_id);\n\n    // Validate the client_secret param\n    assertClientSecret(client_secret);\n\n    // Validate the redirect_uri param\n    assertRedirectUri(redirect_uri);\n\n    // Add defaults to the options\n    options = _.merge({\n      response_type: 'code',\n      scope: 'openid',\n      routes: {\n        login: {\n          path: '/login'\n        },\n        callback: {\n          path: '/authorization-code/callback',\n          defaultRedirect: '/'\n        }\n      },\n      sessionKey: sessionKey || `oidc:${options.issuer}`,\n      maxClockSkew: 120\n    }, options)\n\n    const context = {\n      options\n    };\n\n    /**\n     * Construct an Express router that should be added to an app\n     *\n     * @instance\n     * @property\n     * @memberof ExpressOIDC\n     */\n    this.router = connectUtil.createOIDCRouter(context);\n\n    /**\n     * Ensure that a user is authenticated before continuing.\n     * If not authenticated, then redirects to the login route.\n     * If not authenticated and not requesting text/html, return a 401.\n     *\n     * @instance\n     * @function\n     * @memberof ExpressOIDC\n     */\n    this.ensureAuthenticated = oidcUtil.ensureAuthenticated.bind(null, context);\n\n    // create client\n    oidcUtil.createClient(context)\n    .then(client => {\n      context.client = client;\n      oidcUtil.bootstrapPassportStrategy(context);\n      this.emit('ready');\n    })\n    .catch(err => this.emit('error', err));\n  }\n};\n"]},"metadata":{},"sourceType":"script"}
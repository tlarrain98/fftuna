{"ast":null,"code":"/*!\n * csrf\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar rndm = require('rndm');\n\nvar uid = require('uid-safe');\n\nvar compare = require('tsscmp');\n\nvar crypto = require('crypto');\n/**\n * Module variables.\n * @private\n */\n\n\nvar EQUAL_GLOBAL_REGEXP = /=/g;\nvar PLUS_GLOBAL_REGEXP = /\\+/g;\nvar SLASH_GLOBAL_REGEXP = /\\//g;\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = Tokens;\n/**\n * Token generation/verification class.\n *\n * @param {object} [options]\n * @param {number} [options.saltLength=8] The string length of the salt\n * @param {number} [options.secretLength=18] The byte length of the secret key\n * @public\n */\n\nfunction Tokens(options) {\n  if (!(this instanceof Tokens)) {\n    return new Tokens(options);\n  }\n\n  var opts = options || {};\n  var saltLength = opts.saltLength !== undefined ? opts.saltLength : 8;\n\n  if (typeof saltLength !== 'number' || !isFinite(saltLength) || saltLength < 1) {\n    throw new TypeError('option saltLength must be finite number > 1');\n  }\n\n  var secretLength = opts.secretLength !== undefined ? opts.secretLength : 18;\n\n  if (typeof secretLength !== 'number' || !isFinite(secretLength) || secretLength < 1) {\n    throw new TypeError('option secretLength must be finite number > 1');\n  }\n\n  this.saltLength = saltLength;\n  this.secretLength = secretLength;\n}\n/**\n * Create a new CSRF token.\n *\n * @param {string} secret The secret for the token.\n * @public\n */\n\n\nTokens.prototype.create = function create(secret) {\n  if (!secret || typeof secret !== 'string') {\n    throw new TypeError('argument secret is required');\n  }\n\n  return this._tokenize(secret, rndm(this.saltLength));\n};\n/**\n * Create a new secret key.\n *\n * @param {function} [callback]\n * @public\n */\n\n\nTokens.prototype.secret = function secret(callback) {\n  return uid(this.secretLength, callback);\n};\n/**\n * Create a new secret key synchronously.\n * @public\n */\n\n\nTokens.prototype.secretSync = function secretSync() {\n  return uid.sync(this.secretLength);\n};\n/**\n * Tokenize a secret and salt.\n * @private\n */\n\n\nTokens.prototype._tokenize = function tokenize(secret, salt) {\n  return salt + '-' + hash(salt + '-' + secret);\n};\n/**\n * Verify if a given token is valid for a given secret.\n *\n * @param {string} secret\n * @param {string} token\n * @public\n */\n\n\nTokens.prototype.verify = function verify(secret, token) {\n  if (!secret || typeof secret !== 'string') {\n    return false;\n  }\n\n  if (!token || typeof token !== 'string') {\n    return false;\n  }\n\n  var index = token.indexOf('-');\n\n  if (index === -1) {\n    return false;\n  }\n\n  var salt = token.substr(0, index);\n\n  var expected = this._tokenize(secret, salt);\n\n  return compare(token, expected);\n};\n/**\n * Hash a string with SHA1, returning url-safe base64\n * @param {string} str\n * @private\n */\n\n\nfunction hash(str) {\n  return crypto.createHash('sha1').update(str, 'ascii').digest('base64').replace(PLUS_GLOBAL_REGEXP, '-').replace(SLASH_GLOBAL_REGEXP, '_').replace(EQUAL_GLOBAL_REGEXP, '');\n}","map":{"version":3,"sources":["C:/Users/tlarr/ffwebsite/node_modules/csrf/index.js"],"names":["rndm","require","uid","compare","crypto","EQUAL_GLOBAL_REGEXP","PLUS_GLOBAL_REGEXP","SLASH_GLOBAL_REGEXP","module","exports","Tokens","options","opts","saltLength","undefined","isFinite","TypeError","secretLength","prototype","create","secret","_tokenize","callback","secretSync","sync","tokenize","salt","hash","verify","token","index","indexOf","substr","expected","str","createHash","update","digest","replace"],"mappings":"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","sourcesContent":["/*!\n * csrf\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar rndm = require('rndm')\nvar uid = require('uid-safe')\nvar compare = require('tsscmp')\nvar crypto = require('crypto')\n\n/**\n * Module variables.\n * @private\n */\n\nvar EQUAL_GLOBAL_REGEXP = /=/g\nvar PLUS_GLOBAL_REGEXP = /\\+/g\nvar SLASH_GLOBAL_REGEXP = /\\//g\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = Tokens\n\n/**\n * Token generation/verification class.\n *\n * @param {object} [options]\n * @param {number} [options.saltLength=8] The string length of the salt\n * @param {number} [options.secretLength=18] The byte length of the secret key\n * @public\n */\n\nfunction Tokens (options) {\n  if (!(this instanceof Tokens)) {\n    return new Tokens(options)\n  }\n\n  var opts = options || {}\n\n  var saltLength = opts.saltLength !== undefined\n    ? opts.saltLength\n    : 8\n\n  if (typeof saltLength !== 'number' || !isFinite(saltLength) || saltLength < 1) {\n    throw new TypeError('option saltLength must be finite number > 1')\n  }\n\n  var secretLength = opts.secretLength !== undefined\n    ? opts.secretLength\n    : 18\n\n  if (typeof secretLength !== 'number' || !isFinite(secretLength) || secretLength < 1) {\n    throw new TypeError('option secretLength must be finite number > 1')\n  }\n\n  this.saltLength = saltLength\n  this.secretLength = secretLength\n}\n\n/**\n * Create a new CSRF token.\n *\n * @param {string} secret The secret for the token.\n * @public\n */\n\nTokens.prototype.create = function create (secret) {\n  if (!secret || typeof secret !== 'string') {\n    throw new TypeError('argument secret is required')\n  }\n\n  return this._tokenize(secret, rndm(this.saltLength))\n}\n\n/**\n * Create a new secret key.\n *\n * @param {function} [callback]\n * @public\n */\n\nTokens.prototype.secret = function secret (callback) {\n  return uid(this.secretLength, callback)\n}\n\n/**\n * Create a new secret key synchronously.\n * @public\n */\n\nTokens.prototype.secretSync = function secretSync () {\n  return uid.sync(this.secretLength)\n}\n\n/**\n * Tokenize a secret and salt.\n * @private\n */\n\nTokens.prototype._tokenize = function tokenize (secret, salt) {\n  return salt + '-' + hash(salt + '-' + secret)\n}\n\n/**\n * Verify if a given token is valid for a given secret.\n *\n * @param {string} secret\n * @param {string} token\n * @public\n */\n\nTokens.prototype.verify = function verify (secret, token) {\n  if (!secret || typeof secret !== 'string') {\n    return false\n  }\n\n  if (!token || typeof token !== 'string') {\n    return false\n  }\n\n  var index = token.indexOf('-')\n\n  if (index === -1) {\n    return false\n  }\n\n  var salt = token.substr(0, index)\n  var expected = this._tokenize(secret, salt)\n\n  return compare(token, expected)\n}\n\n/**\n * Hash a string with SHA1, returning url-safe base64\n * @param {string} str\n * @private\n */\n\nfunction hash (str) {\n  return crypto\n    .createHash('sha1')\n    .update(str, 'ascii')\n    .digest('base64')\n    .replace(PLUS_GLOBAL_REGEXP, '-')\n    .replace(SLASH_GLOBAL_REGEXP, '_')\n    .replace(EQUAL_GLOBAL_REGEXP, '')\n}\n"]},"metadata":{},"sourceType":"script"}